upstream app_server_7001 {
    #If there is only one server in an upstream, NGINX will operate as a reverse proxy. If more than one server is in an upstream, NGINX will operate as a load balancer.

    #NGINX is great at simplifying things that might be harder to implement in other technologies like SSL termination and logging. NGINX proxies are also good for accelerating the response from backend servers by caching content.
    server 127.0.0.1:7001;
}
#The upstream directive is one of the key components used to configure NGINX for proxying and load balancing. The upstream directive groups servers together, allowing other directives to reference all of the servers as a single unit.

#Place the application on several servers running behind a load balancer. Deploy updates to the servers one at a time so the other servers can continue processing requests.

#This is the best choice. With multiple servers behind a load balancer, a site or application can be more reliable by continuing to respond to requests if one server goes down. This also gives site administrators some flexibility for maintenance since they can take one server offline to update software, for example, without taking the entire site offline. Depending on the needs of the application, as long as one server is online, the site will still be up. This will keep customers happy.

upstream roundrobin {
    # default is round robin
    server 127.0.0.1:7001;
    server 127.0.0.1:7002;
    server 127.0.0.1:7003;
}

upstream leastconn {
    # The server with the fewest connections will get traffic
    least_conn;
    server 127.0.0.1:7001;
    server 127.0.0.1:7002;
    server 127.0.0.1:7003;
}

upstream iphash {
    # Connections will stick to the same server
    ip_hash;
    server 127.0.0.1:7001;
    server 127.0.0.1:7002;
    server 127.0.0.1:7003;
}

upstream weighted {
    # More connections will be sent to the weighted server
    # The weight directive is used to influence load balancing methods. Since each server is considered evenly in the round robin method and by connections in the least connections method, a weight can be applied to a server to give it a higher preference.
    server 127.0.0.1:7001 weight=2;
    server 127.0.0.1:7002;
    server 127.0.0.1:7003;
}

server {
    listen 80;
    root /var/www/binaryville;
    access_log /var/log/nginx/binaryville.access.log;
    error_log /var/log/nginx/binaryville.error.log;

    location / {
        try_files $uri $uri/ =404;
    }

    location /images {
        autoindex on;
        access_log /var/log/nginx/binaryville.image.access.log;
        error_log /var/log/nginx/binaryville.image.error.log;
    }

    error_page 404 /404.html;
    location = /404.html {
        internal;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        internal;
    }

    location /500 {
        fastcgi_pass unix:/this/will/fail;
    }

    location /proxy {
        # Trailing slash is key!
        proxy_pass http://app_server_7001/;

        # Logging for access to the proxy
        access_log /var/log/nginx/binaryville.proxy.access.log;
        error_log /var/log/nginx/binaryville.proxy.error.log;
    }

    location /roundrobin {
        # Trailing slash is key!
        proxy_pass http://roundrobin/;
    }

   location /leastconn {
        # Trailing slash is key!
        proxy_pass http://leastconn/;
    }

    location /iphash {
        # Trailing slash is key!
        proxy_pass http://iphash/;
    }

    location /weighted {
        # Trailing slash is key!
        proxy_pass http://weighted/;
    }
}
